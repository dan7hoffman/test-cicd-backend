name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: npx prisma migrate deploy

      - name: Build TypeScript
        working-directory: ./backend
        run: npm run build

      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          SESSION_SECRET: test-session-secret-for-ci-32-chars-minimum
          CSRF_SECRET: test-csrf-secret-for-ci-32-chars-minimum
          FRONTEND_URL: http://localhost:4200
          SMTP_HOST: localhost
          SMTP_PORT: 1025
          SMTP_SECURE: false
          SMTP_FROM: test@example.com
        run: npm test

      - name: Security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate
        continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Check TypeScript
        working-directory: ./backend
        run: npx tsc --noEmit

      - name: Check code formatting (if ESLint configured)
        working-directory: ./backend
        run: |
          if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ]; then
            npx eslint . --ext .ts
          else
            echo "ESLint not configured, skipping..."
          fi
        continue-on-error: true
